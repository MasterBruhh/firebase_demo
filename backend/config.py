"""
Configuraci√≥n de la Aplicaci√≥n - Indexador de Documentos con Gemini AI

Este m√≥dulo maneja toda la configuraci√≥n de la aplicaci√≥n utilizando Pydantic
para validaci√≥n autom√°tica de variables de entorno. Se encarga de cargar y
validar todas las credenciales y configuraciones necesarias para:

- Firebase (autenticaci√≥n, Firestore, Storage)
- Google Gemini AI (an√°lisis de documentos)
- Meilisearch (motor de b√∫squeda)
- Configuraciones de seguridad y entorno


"""

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field
import os

# ==================================================================================
#                           CONFIGURACI√ìN DE RUTAS DE ARCHIVOS
# ==================================================================================

# Determinar la ruta base del proyecto (directorio donde est√° este archivo)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Construir la ruta al archivo .env (debe estar en el mismo directorio que config.py)
ENV_FILE_PATH = os.path.join(BASE_DIR, ".env")


# ==================================================================================
#                           CLASE DE CONFIGURACI√ìN PRINCIPAL
# ==================================================================================

class Settings(BaseSettings):
    """
    Clase de configuraci√≥n principal utilizando Pydantic Settings.
    
    Esta clase define todas las variables de configuraci√≥n necesarias para la aplicaci√≥n.
    Pydantic se encarga autom√°ticamente de:
    - Cargar variables desde el archivo .env
    - Validar tipos de datos
    - Proporcionar valores por defecto
    - Generar errores descriptivos si faltan variables requeridas
    
    Attributes:
        model_config: Configuraci√≥n del modelo Pydantic
        FIREBASE_SERVICE_ACCOUNT_KEY_PATH: Ruta al archivo JSON de credenciales de Firebase
        FIREBASE_STORAGE_BUCKET: Nombre del bucket de Firebase Storage
        GEMINI_API_KEY: Clave de API para Google Gemini AI
        MEILISEARCH_HOST: URL del servidor Meilisearch
        MEILISEARCH_MASTER_KEY: Clave maestra de Meilisearch (opcional)
        SECRET_KEY: Clave secreta para JWT y otras funciones de seguridad
        APP_ENV: Entorno de la aplicaci√≥n (development, production)
    """
    
    # Configuraci√≥n del modelo Pydantic
    model_config = SettingsConfigDict(
        env_file=ENV_FILE_PATH,        # Archivo de variables de entorno
        env_file_encoding='utf-8',     # Codificaci√≥n del archivo .env
        extra='ignore'                 # Ignorar variables no definidas aqu√≠
    )

    # ===== CONFIGURACI√ìN DE FIREBASE =====
    FIREBASE_SERVICE_ACCOUNT_KEY_PATH: str = Field(
        ...,  # Campo requerido
        description="Ruta relativa o absoluta al archivo JSON de credenciales de Firebase Service Account",
        example="firebase-service-account.json"
    )
    
    FIREBASE_STORAGE_BUCKET: str = Field(
        ...,  # Campo requerido
        description="Nombre del bucket de Firebase Storage para almacenar documentos",
        example="mi-proyecto.appspot.com"
    )

    # ===== CONFIGURACI√ìN DE GOOGLE GEMINI AI =====
    GEMINI_API_KEY: str = Field(
        ...,  # Campo requerido
        description="Clave de API de Google Gemini para an√°lisis de documentos con IA",
        min_length=20  # Validaci√≥n m√≠nima de longitud
    )

    # ===== CONFIGURACI√ìN DE MEILISEARCH =====
    MEILISEARCH_HOST: str = Field(
        ...,  # Campo requerido
        description="URL completa del servidor Meilisearch",
        example="http://localhost:7700"
    )
    
    MEILISEARCH_MASTER_KEY: str | None = Field(
        None,  # Campo opcional
        description="Clave maestra de Meilisearch para autenticaci√≥n (opcional en desarrollo)",
        min_length=16  # Si se proporciona, debe tener al menos 16 caracteres
    )

    # ===== CONFIGURACI√ìN DE SEGURIDAD =====
    SECRET_KEY: str = Field(
        ...,  # Campo requerido
        description="Clave secreta para JWT y otras funciones criptogr√°ficas",
        min_length=32  # M√≠nimo 32 caracteres para seguridad
    )

    # ===== CONFIGURACI√ìN DEL ENTORNO =====
    APP_ENV: str = Field(
        "development",                                           # valor por defecto
        description="Entorno de la aplicaci√≥n: development, staging, production",
        pattern=r"^(development|staging|production)$"            # ‚Üê antes era regex=
    )


# ==================================================================================
#                           INSTANCIA GLOBAL DE CONFIGURACI√ìN
# ==================================================================================

# Crear una instancia √∫nica de configuraci√≥n para importar en otros m√≥dulos
# Esta instancia carga autom√°ticamente todas las variables del archivo .env
try:
    settings = Settings()
    
    # Mensaje de depuraci√≥n - comentado para producci√≥n
    # print("‚úÖ Configuraci√≥n cargada exitosamente")
    
except Exception as e:
    # Error cr√≠tico: la aplicaci√≥n no puede funcionar sin configuraci√≥n v√°lida
    print(f"‚ùå ERROR CR√çTICO: No se pudo cargar la configuraci√≥n: {e}")
    print("üìã Aseg√∫rate de que:")
    print("   1. El archivo .env existe en el directorio backend/")
    print("   2. Todas las variables requeridas est√°n definidas")
    print("   3. Los valores tienen el formato correcto")
    print("üìñ Consulta la documentaci√≥n para m√°s detalles")
    raise


# ==================================================================================
#                           FUNCI√ìN DE VALIDACI√ìN PARA DESARROLLO
# ==================================================================================

def validar_configuracion():
    """
    Funci√≥n auxiliar para validar que todas las configuraciones est√°n correctas.
    
    √ötil para ejecutar durante el desarrollo para verificar que todos los
    servicios externos est√°n configurados correctamente.
    
    Returns:
        bool: True si toda la configuraci√≥n es v√°lida
        
    Raises:
        ValueError: Si alguna configuraci√≥n es inv√°lida
    """
    errores = []
    
    # Validar archivo de credenciales de Firebase
    firebase_path = os.path.join(BASE_DIR, settings.FIREBASE_SERVICE_ACCOUNT_KEY_PATH)
    if not os.path.exists(firebase_path):
        errores.append(f"Archivo de credenciales Firebase no encontrado: {firebase_path}")
    
    # Validar formato del bucket de Storage
    if not settings.FIREBASE_STORAGE_BUCKET.endswith('.appspot.com'):
        errores.append("El bucket de Firebase Storage debe terminar en '.appspot.com'")
    
    # Validar formato de la URL de Meilisearch
    if not settings.MEILISEARCH_HOST.startswith(('http://', 'https://')):
        errores.append("MEILISEARCH_HOST debe ser una URL completa (http:// o https://)")
    
    # Validar longitud de la clave secreta
    if len(settings.SECRET_KEY) < 32:
        errores.append("SECRET_KEY debe tener al menos 32 caracteres")
    
    if errores:
        raise ValueError("Errores de configuraci√≥n encontrados:\n" + "\n".join(f"  ‚Ä¢ {error}" for error in errores))
    
    return True


# ==================================================================================
#                           SCRIPT DE DEPURACI√ìN
# ==================================================================================

if __name__ == "__main__":
    """
    Script de depuraci√≥n para verificar la configuraci√≥n.
    
    Ejecuta este archivo directamente para ver el estado de la configuraci√≥n:
    python config.py
    """
    
    print("üîç Verificando configuraci√≥n de la aplicaci√≥n...")
    print("=" * 60)
    
    try:
        # Intentar validar toda la configuraci√≥n
        validar_configuracion()
        
        print("üìã Configuraciones cargadas:")
        print(f"   ‚Ä¢ Archivo de credenciales Firebase: {settings.FIREBASE_SERVICE_ACCOUNT_KEY_PATH}")
        print(f"   ‚Ä¢ Bucket de Storage: {settings.FIREBASE_STORAGE_BUCKET}")
        print(f"   ‚Ä¢ Clave Gemini API: {settings.GEMINI_API_KEY[:8]}..." if settings.GEMINI_API_KEY else "   ‚Ä¢ Clave Gemini API: NO CONFIGURADA")
        print(f"   ‚Ä¢ Host Meilisearch: {settings.MEILISEARCH_HOST}")
        print(f"   ‚Ä¢ Clave Meilisearch: {'‚úÖ Configurada' if settings.MEILISEARCH_MASTER_KEY else '‚ö†Ô∏è  No configurada (opcional)'}")
        print(f"   ‚Ä¢ Clave secreta: {'‚úÖ Configurada' if settings.SECRET_KEY else '‚ùå No configurada'}")
        print(f"   ‚Ä¢ Entorno: {settings.APP_ENV}")
        
        print("\n‚úÖ Configuraci√≥n v√°lida - La aplicaci√≥n puede iniciarse")
        
    except Exception as e:
        print(f"\n‚ùå Error en la configuraci√≥n: {e}")
        print("\nüìñ Pasos para solucionar:")
        print("   1. Crea un archivo .env en el directorio backend/")
        print("   2. A√±ade todas las variables requeridas")
        print("   3. Verifica que los archivos de credenciales existen")
        print("   4. Ejecuta este script nuevamente para verificar")
        
        # Ejemplo de archivo .env para referencia
        print("\nüìÑ Ejemplo de archivo .env:")
        print("""
# Firebase Configuration
FIREBASE_SERVICE_ACCOUNT_KEY_PATH=firebase-service-account.json
FIREBASE_STORAGE_BUCKET=tu-proyecto.appspot.com

# Google Gemini AI
GEMINI_API_KEY=tu-clave-de-gemini-aqui

# Meilisearch Configuration
MEILISEARCH_HOST=http://localhost:7700
MEILISEARCH_MASTER_KEY=tu-clave-meilisearch-aqui

# Security
SECRET_KEY=una-clave-muy-segura-de-al-menos-32-caracteres

# Environment
APP_ENV=development
        """.strip())
